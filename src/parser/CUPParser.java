
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 02 17:21:43 AEST 2016
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import source.*;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.Operator;
import syms.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 02 17:21:43 AEST 2016
  */
public class CUPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CUPParser() {super();}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\040\002\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\004\005" +
    "\000\002\004\004\000\002\004\002\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\006\003\000\002" +
    "\006\004\000\002\007\006\000\002\007\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\004\000\002\012\006\000" +
    "\002\012\003\000\002\013\003\000\002\013\007\000\002" +
    "\013\006\000\002\013\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\004\000\002\016\006\000\002\016\003" +
    "\000\002\017\005\000\002\020\007\000\002\020\005\000" +
    "\002\021\002\000\002\025\005\000\002\023\003\000\002" +
    "\023\005\000\002\024\006\000\002\024\010\000\002\024" +
    "\015\000\002\024\003\000\002\024\004\000\002\024\004" +
    "\000\002\024\005\000\002\024\007\000\002\024\003\000" +
    "\002\022\002\000\002\037\003\000\002\037\006\000\002" +
    "\026\003\000\002\027\003\000\002\027\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\030\003\000" +
    "\002\030\005\000\002\034\003\000\002\034\003\000\002" +
    "\031\003\000\002\031\005\000\002\035\003\000\002\035" +
    "\003\000\002\032\004\000\002\032\004\000\002\032\005" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\016\003\005\030\001\032\001\042\001\045" +
    "\001\046\001\001\002\000\004\002\216\001\002\000\004" +
    "\002\ufffe\001\002\000\014\030\ufffa\032\ufffa\042\ufffa\045" +
    "\ufffa\046\ufffa\001\002\000\004\002\000\001\002\000\014" +
    "\030\020\032\021\042\011\045\017\046\013\001\002\000" +
    "\004\052\211\001\002\000\006\002\ufffd\006\ufffd\001\002" +
    "\000\006\003\201\052\204\001\002\000\004\006\200\001" +
    "\002\000\014\030\ufffb\032\ufffb\042\ufffb\045\ufffb\046\ufffb" +
    "\001\002\000\004\015\176\001\002\000\006\003\152\052" +
    "\153\001\002\000\024\003\046\030\020\031\040\036\050" +
    "\037\051\043\043\047\037\050\045\052\047\001\002\000" +
    "\006\003\022\052\024\001\002\000\020\003\ufff3\030\ufff3" +
    "\032\ufff3\042\ufff3\045\ufff3\046\ufff3\052\ufff3\001\002\000" +
    "\020\003\022\030\ufff9\032\ufff9\042\ufff9\045\ufff9\046\ufff9" +
    "\052\024\001\002\000\004\015\026\001\002\000\020\003" +
    "\ufff6\030\ufff6\032\ufff6\042\ufff6\045\ufff6\046\ufff6\052\ufff6" +
    "\001\002\000\012\003\027\012\032\052\031\053\030\001" +
    "\002\000\010\006\uffef\023\uffef\026\uffef\001\002\000\010" +
    "\006\ufff2\023\ufff2\026\ufff2\001\002\000\010\006\ufff0\023" +
    "\ufff0\026\ufff0\001\002\000\012\003\027\012\032\052\031" +
    "\053\030\001\002\000\004\006\034\001\002\000\020\003" +
    "\ufff4\030\ufff4\032\ufff4\042\ufff4\045\ufff4\046\ufff4\052\ufff4" +
    "\001\002\000\010\006\ufff1\023\ufff1\026\ufff1\001\002\000" +
    "\020\003\ufff5\030\ufff5\032\ufff5\042\ufff5\045\ufff5\046\ufff5" +
    "\052\ufff5\001\002\000\016\003\065\004\067\011\062\012" +
    "\055\052\047\053\057\001\002\000\004\052\143\001\002" +
    "\000\012\006\uffd7\034\uffd7\035\uffd7\040\uffd7\001\002\000" +
    "\006\006\135\035\142\001\002\000\004\052\047\001\002" +
    "\000\010\006\uffdc\035\uffdc\040\uffdc\001\002\000\016\003" +
    "\065\004\067\011\062\012\055\052\047\053\057\001\002" +
    "\000\012\006\uffd2\034\uffd2\035\uffd2\040\uffd2\001\002\000" +
    "\054\005\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\025\uffd0\026\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\040\uffd0\044\uffd0\001\002\000\004\052\124\001\002\000" +
    "\016\003\065\004\067\011\062\012\055\052\047\053\057" +
    "\001\002\000\006\010\054\025\053\001\002\000\016\003" +
    "\065\004\067\011\062\012\055\052\047\053\057\001\002" +
    "\000\016\003\065\004\067\011\062\012\055\052\047\053" +
    "\057\001\002\000\016\003\uffb7\004\uffb7\011\uffb7\012\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\024\005\uffce\006\uffce\023" +
    "\uffce\026\uffce\033\uffce\034\uffce\035\uffce\040\uffce\044\uffce" +
    "\001\002\000\050\005\uffba\006\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\026\uffba\033\uffba\034\uffba\035\uffba\040" +
    "\uffba\044\uffba\001\002\000\044\005\uffcd\006\uffcd\011\105" +
    "\012\101\015\112\016\103\017\102\020\106\021\110\022" +
    "\104\023\uffcd\026\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd" +
    "\044\uffcd\001\002\000\012\006\uffd4\034\uffd4\035\uffd4\040" +
    "\uffd4\001\002\000\016\003\065\004\067\011\062\012\055" +
    "\052\047\053\057\001\002\000\050\005\uffc5\006\uffc5\011" +
    "\uffc5\012\uffc5\013\075\014\074\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\040\uffc5\044\uffc5\001\002\000\050\005\uffc1" +
    "\006\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\026\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\040\uffc1\044\uffc1\001\002\000" +
    "\050\005\uffb8\006\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\026\uffb8\033\uffb8\034\uffb8\035\uffb8\040\uffb8\044\uffb8" +
    "\001\002\000\016\003\065\004\067\011\062\012\055\052" +
    "\047\053\057\001\002\000\016\003\065\004\067\011\062" +
    "\012\055\052\047\053\057\001\002\000\052\005\uffb9\006" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\025\053\026" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9\044\uffb9\001\002" +
    "\000\004\005\072\001\002\000\050\005\uffbb\006\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\040\uffbb\044\uffbb\001\002\000\050\005\uffbc" +
    "\006\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\040\uffbc\044\uffbc\001\002\000" +
    "\016\003\uffbe\004\uffbe\011\uffbe\012\uffbe\052\uffbe\053\uffbe" +
    "\001\002\000\016\003\uffbf\004\uffbf\011\uffbf\012\uffbf\052" +
    "\uffbf\053\uffbf\001\002\000\016\003\065\004\067\011\062" +
    "\012\055\052\047\053\057\001\002\000\050\005\uffc0\006" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\026\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\040\uffc0\044\uffc0\001\002\000\050" +
    "\005\uffbd\006\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\026\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\044\uffbd\001" +
    "\002\000\016\003\uffc2\004\uffc2\011\uffc2\012\uffc2\052\uffc2" +
    "\053\uffc2\001\002\000\016\003\uffc9\004\uffc9\011\uffc9\012" +
    "\uffc9\052\uffc9\053\uffc9\001\002\000\016\003\uffca\004\uffca" +
    "\011\uffca\012\uffca\052\uffca\053\uffca\001\002\000\016\003" +
    "\uffc7\004\uffc7\011\uffc7\012\uffc7\052\uffc7\053\uffc7\001\002" +
    "\000\016\003\uffc3\004\uffc3\011\uffc3\012\uffc3\052\uffc3\053" +
    "\uffc3\001\002\000\016\003\uffc6\004\uffc6\011\uffc6\012\uffc6" +
    "\052\uffc6\053\uffc6\001\002\000\016\003\065\004\067\011" +
    "\062\012\055\052\047\053\057\001\002\000\016\003\uffc8" +
    "\004\uffc8\011\uffc8\012\uffc8\052\uffc8\053\uffc8\001\002\000" +
    "\016\003\065\004\067\011\062\012\055\052\047\053\057" +
    "\001\002\000\016\003\uffcb\004\uffcb\011\uffcb\012\uffcb\052" +
    "\uffcb\053\uffcb\001\002\000\030\005\uffcc\006\uffcc\011\105" +
    "\012\101\023\uffcc\026\uffcc\033\uffcc\034\uffcc\035\uffcc\040" +
    "\uffcc\044\uffcc\001\002\000\050\005\uffc4\006\uffc4\011\uffc4" +
    "\012\uffc4\013\075\014\074\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\040\uffc4\044\uffc4\001\002\000\004\026\116\001" +
    "\002\000\054\005\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\040\uffcf\044\uffcf\001\002\000\004\044\120\001" +
    "\002\000\024\003\046\030\020\031\040\036\050\037\051" +
    "\043\043\047\037\050\045\052\047\001\002\000\004\034" +
    "\122\001\002\000\024\003\046\030\020\031\040\036\050" +
    "\037\051\043\043\047\037\050\045\052\047\001\002\000" +
    "\012\006\uffd9\034\uffd9\035\uffd9\040\uffd9\001\002\000\004" +
    "\007\125\001\002\000\004\025\126\001\002\000\016\003" +
    "\065\004\067\011\062\012\055\052\047\053\057\001\002" +
    "\000\004\023\130\001\002\000\016\003\065\004\067\011" +
    "\062\012\055\052\047\053\057\001\002\000\004\026\132" +
    "\001\002\000\004\033\133\001\002\000\024\003\046\030" +
    "\020\031\040\036\050\037\051\043\043\047\037\050\045" +
    "\052\047\001\002\000\006\006\135\040\136\001\002\000" +
    "\024\003\046\030\020\031\040\036\050\037\051\043\043" +
    "\047\037\050\045\052\047\001\002\000\012\006\uffd8\034" +
    "\uffd8\035\uffd8\040\uffd8\001\002\000\010\006\uffdb\035\uffdb" +
    "\040\uffdb\001\002\000\016\006\uffd5\011\105\012\101\034" +
    "\uffd5\035\uffd5\040\uffd5\001\002\000\014\006\uffd6\025\053" +
    "\034\uffd6\035\uffd6\040\uffd6\001\002\000\014\002\uffdd\006" +
    "\uffdd\034\uffdd\035\uffdd\040\uffdd\001\002\000\004\004\144" +
    "\001\002\000\004\005\uffd1\001\002\000\004\005\146\001" +
    "\002\000\012\006\uffd3\034\uffd3\035\uffd3\040\uffd3\001\002" +
    "\000\004\033\150\001\002\000\024\003\046\030\020\031" +
    "\040\036\050\037\051\043\043\047\037\050\045\052\047" +
    "\001\002\000\012\006\uffda\034\uffda\035\uffda\040\uffda\001" +
    "\002\000\020\003\uffeb\030\uffeb\032\uffeb\042\uffeb\045\uffeb" +
    "\046\uffeb\052\uffeb\001\002\000\004\015\157\001\002\000" +
    "\020\003\uffee\030\uffee\032\uffee\042\uffee\045\uffee\046\uffee" +
    "\052\uffee\001\002\000\020\003\152\030\ufff8\032\ufff8\042" +
    "\ufff8\045\ufff8\046\ufff8\052\153\001\002\000\020\003\uffed" +
    "\030\uffed\032\uffed\042\uffed\045\uffed\046\uffed\052\uffed\001" +
    "\002\000\012\003\162\025\165\027\161\052\163\001\002" +
    "\000\004\006\175\001\002\000\012\003\162\025\165\027" +
    "\161\052\163\001\002\000\006\006\uffe7\041\uffe7\001\002" +
    "\000\006\006\uffe6\041\uffe6\001\002\000\006\006\uffea\041" +
    "\uffea\001\002\000\012\003\027\012\032\052\031\053\030" +
    "\001\002\000\004\023\167\001\002\000\012\003\027\012" +
    "\032\052\031\053\030\001\002\000\004\026\171\001\002" +
    "\000\006\006\uffe9\041\uffe9\001\002\000\004\041\173\001" +
    "\002\000\012\003\162\025\165\027\161\052\163\001\002" +
    "\000\006\006\uffe8\041\uffe8\001\002\000\020\003\uffec\030" +
    "\uffec\032\uffec\042\uffec\045\uffec\046\uffec\052\uffec\001\002" +
    "\000\014\030\ufffa\032\ufffa\042\ufffa\045\ufffa\046\ufffa\001" +
    "\002\000\004\006\uffe1\001\002\000\014\030\ufffc\032\ufffc" +
    "\042\ufffc\045\ufffc\046\ufffc\001\002\000\020\003\uffe2\030" +
    "\uffe2\032\uffe2\042\uffe2\045\uffe2\046\uffe2\052\uffe2\001\002" +
    "\000\020\003\201\030\ufff7\032\ufff7\042\ufff7\045\ufff7\046" +
    "\ufff7\052\204\001\002\000\020\003\uffe5\030\uffe5\032\uffe5" +
    "\042\uffe5\045\uffe5\046\uffe5\052\uffe5\001\002\000\004\007" +
    "\205\001\002\000\004\052\163\001\002\000\004\006\207" +
    "\001\002\000\020\003\uffe3\030\uffe3\032\uffe3\042\uffe3\045" +
    "\uffe3\046\uffe3\052\uffe3\001\002\000\020\003\uffe4\030\uffe4" +
    "\032\uffe4\042\uffe4\045\uffe4\046\uffe4\052\uffe4\001\002\000" +
    "\006\003\212\004\213\001\002\000\004\015\uffdf\001\002" +
    "\000\004\005\uffde\001\002\000\004\005\215\001\002\000" +
    "\004\015\uffe0\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\003\040\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\006\004\007\001\001" +
    "\000\002\001\001\000\012\005\014\017\013\020\015\025" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\201\016\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\154\012\153\001\001" +
    "\000\012\023\041\024\043\025\040\037\051\001\001\000" +
    "\006\006\022\007\024\001\001\000\002\001\001\000\004" +
    "\007\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\026\146\027\055\030\057\031\062\032\063\036" +
    "\065\037\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\140\001\001\000\002\001" +
    "\001\000\014\030\137\031\062\032\063\036\065\037\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\026\116\027\055\030\057\031\062\032\063" +
    "\036\065\037\067\001\001\000\002\001\001\000\020\026" +
    "\114\027\055\030\057\031\062\032\063\036\065\037\067" +
    "\001\001\000\020\026\060\027\055\030\057\031\062\032" +
    "\063\036\065\037\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\110\034\106\001" +
    "\001\000\002\001\001\000\010\032\077\036\065\037\067" +
    "\001\001\000\004\035\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\072\036\065\037\067\001\001" +
    "\000\020\026\070\027\055\030\057\031\062\032\063\036" +
    "\065\037\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\076\036\065\037\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\031\113\032\063\036" +
    "\065\037\067\001\001\000\002\001\001\000\014\030\112" +
    "\031\062\032\063\036\065\037\067\001\001\000\002\001" +
    "\001\000\004\034\106\001\001\000\004\035\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\120\025\040\037\051\001\001\000\002\001\001" +
    "\000\010\024\122\025\040\037\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\026\126" +
    "\027\055\030\057\031\062\032\063\036\065\037\067\001" +
    "\001\000\002\001\001\000\020\026\130\027\055\030\057" +
    "\031\062\032\063\036\065\037\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\133\024\043\025\040" +
    "\037\051\001\001\000\002\001\001\000\010\024\136\025" +
    "\040\037\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\150\025\040\037\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\155\001\001\000\002\001\001\000\006\013\157\014\163" +
    "\001\001\000\002\001\001\000\006\013\171\014\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\165\001\001\000\002\001\001\000\004\010" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\173\014\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\176\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /* This section provides some methods used by Java_CUP during parsing.
       They override its default methods for reporting syntax errors. */
        
    /** Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Override the default CUP syntax_error method with one 
     * that integrates better with the compiler's error reporting. */
    @Override
    public void syntax_error( Symbol cur_token ) {
        errors.error( "PL0 syntax error", new Position( cur_token.left ) );
    }
    /** Override the default CUP unrecovered_syntax_error method with one 
     * that integrates better with the compiler's error reporting. */
    @Override
    public void unrecovered_syntax_error( Symbol cur_token ) {
        errors.error( "PL0 unrecovered syntax error", 
                        new Position( cur_token.left ) );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CUPParser$actions {

  /* This section provides global variables and methods used in the
     * semantics actions associated with parsing rules.
     * These are the only global variables you should need. */

    /** Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Symbol table is available globally.
     *  Its current scope corresponds to the procedure/main program 
     *  being processed.
     */
    SymbolTable symtab;

  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // UnaryOperator ::= MINUS 
            {
              Operator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = Operator.NEG_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Factor ::= error 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ErrorNode( new Position(eleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Factor ::= LValue 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = lval;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Factor ::= NUMBER 
            {
              ExpNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ConstNode( new Position( nleft ), 
                    Predefined.INTEGER_TYPE, n.intValue() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Factor ::= LPAREN Condition RPAREN 
            {
              ExpNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = c;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Factor ::= UnaryOperator Factor 
            {
              ExpNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.OperatorNode( new Position( opleft ), 
                        op, e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Factor ::= PLUS Factor 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MulOp ::= DIVIDE 
            {
              Operator RESULT =null;
		
            RESULT = Operator.DIV_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MulOp ::= TIMES 
            {
              Operator RESULT =null;
		
            RESULT = Operator.MUL_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Term ::= Term MulOp Factor 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.OperatorNode(new Position(opleft),op,
                new ExpNode.ArgumentsNode(e1,e2) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Term ::= Factor 
            {
              ExpNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode f = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = f;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AddOp ::= MINUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.SUB_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AddOp ::= PLUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.ADD_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp ::= Exp AddOp Term 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.OperatorNode(new Position(opleft),op,
                new ExpNode.ArgumentsNode(e1,e2) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp ::= Term 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = t;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Relation ::= GEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.GEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Relation ::= GREATER 
            {
              Operator RESULT =null;
		
            RESULT = Operator.GREATER_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Relation ::= LESS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.LESS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Relation ::= LEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.LEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Relation ::= NEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.NEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Relation ::= EQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.EQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelCondition ::= Exp Relation Exp 
            {
              ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.OperatorNode( new Position( opleft ),
                op, new ExpNode.ArgumentsNode(e1,e2) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelCondition ::= Exp 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Condition ::= RelCondition 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Condition",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LValue ::= LValue LBRACKET Condition RBRACKET 
            {
              ExpNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ExpNode cond = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
    		RESULT = new ExpNode.ArrayNode( new Position(lvalleft), lval, cond );
    	
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LValue ::= IDENTIFIER 
            {
              ExpNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.IdentifierNode( new Position(idleft), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ActualParamList ::= 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= error 
            {
              StatementNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.ErrorNode( new Position(pleft) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= KW_CALL IDENTIFIER LPAREN ActualParamList RPAREN 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = new StatementNode.CallNode( new Position(idleft), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= LValue ASSIGN Condition 
            {
              StatementNode RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int rvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int rvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode rval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
          RESULT = new StatementNode.AssignmentNode( new Position(lvalleft),
                                            lval, rval );
       
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= KW_WRITE Exp 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WriteNode( new Position(eleft), e );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= KW_READ LValue 
            {
              StatementNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.AssignmentNode( new Position(lvalleft), 
                     lval, new ExpNode.ReadNode( new Position(rleft) ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= CompoundStatement 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = s; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= KW_FOR IDENTIFIER COLON LBRACKET Condition RANGE Condition RBRACKET KW_DO StatementList KW_OD 
            {
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)).right;
		ExpNode c1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-6)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).right;
		ExpNode c2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
			RESULT = new StatementNode.ForNode( new Position(idleft), id, c1, c2, sl );
		
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-10)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= KW_IF Condition KW_THEN Statement KW_ELSE Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.IfNode( new Position(cleft), c, s1, s2 );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= KW_WHILE Condition KW_DO Statement 
            {
              StatementNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WhileNode( new Position(cleft), c, s );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementList ::= StatementList SEMICOLON Statement 
            {
              StatementNode.ListNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            sl.addStatement( s );
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatementList ::= Statement 
            {
              StatementNode.ListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new StatementNode.ListNode( new Position(sleft) );
            RESULT.addStatement(s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CompoundStatement ::= KW_BEGIN StatementList KW_END 
            {
              StatementNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		StatementNode.ListNode sl = (StatementNode.ListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormalParamList ::= 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER error 
            {
              Scope RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            SymEntry.ProcedureEntry procEntry = 
                new SymEntry.ProcedureEntry( id, new Position( idleft ) );
            RESULT = symtab.newScope( procEntry );
            procEntry.setLocalScope( RESULT );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER LPAREN FormalParamList RPAREN 
            {
              Scope RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            SymEntry.ProcedureEntry procEntry;
            /* Add an entry for the procedure to the current scope */
            Position pos = new Position(idleft);
            procEntry = symtab.getCurrentScope().addProcedure( id, pos );
            if( procEntry == null ) {
                errors.error( id + " already declared", pos );
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't in symtab. */
                procEntry = new SymEntry.ProcedureEntry( id, pos );
                procEntry.setScope( symtab.getCurrentScope() );
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            RESULT = symtab.newScope( procEntry );
            procEntry.setLocalScope( RESULT );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ProcedureDef ::= ProcedureHead EQUALS Block 
            {
              DeclNode.ProcedureNode RESULT =null;
		int scopeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int scoperight = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		Scope scope = (Scope)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode.BlockNode b = (StatementNode.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            b.setBlockLocals( scope );
            symtab.leaveScope();
            RESULT = new DeclNode.ProcedureNode( scope.getProcEntry(), b );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureDef",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarDecl ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDecl ::= IDENTIFIER COLON TypeIdentifier SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            Position pos = new Position(idleft);
            // Variables are always of ReferenceType.
            Type.ReferenceType varType = new Type.ReferenceType( type );
            if(symtab.getCurrentScope().addVariable(id, pos, varType) == null) {
                errors.error( id + " already declared", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDeclSeq ::= VarDeclSeq VarDecl 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDeclSeq ::= VarDecl 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TypeIdentifier ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 /* As the type identifier may not be defined at this point
            * the abstract syntax tree records the id, as well as the 
            * symbol table context to look it up within later.
            */
            RESULT = new Type.IdRefType( id, symtab.getCurrentScope(),
                                         new Position( idleft ) );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= error 
            {
              Type RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = Type.ERROR_TYPE;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= KW_ARRAY Type KW_OF Type 
            {
              Type RESULT =null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		Type index = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type element = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
        	RESULT = new Type.ArrayType( index, element );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= LBRACKET Constant RANGE Constant RBRACKET 
            {
              Type RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		ConstExp lo = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ConstExp hi = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = new Type.SubrangeType( lo, hi );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= TypeIdentifier 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDef ::= IDENTIFIER EQUALS Type SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            Position pos = new Position(idleft);
            if( symtab.getCurrentScope().addType( id, pos, type ) == null ) {
                errors.error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDefSeq ::= TypeDefSeq TypeDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDefSeq ::= TypeDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constant ::= error 
            {
              ConstExp RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ConstExp.ErrorNode( new Position( errleft ),
                                             symtab.getCurrentScope() );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= IDENTIFIER 
            {
              ConstExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.ConstIdNode( new Position( idleft ), 
                    symtab.getCurrentScope(), id );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= MINUS Constant 
            {
              ConstExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NegateNode( new Position( opleft ), 
                    symtab.getCurrentScope(), c ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constant ::= NUMBER 
            {
              ConstExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NumberNode( new Position( nleft), 
                    symtab.getCurrentScope(), Predefined.INTEGER_TYPE, n ); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDef ::= IDENTIFIER EQUALS Constant SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            /* The attribute idleft represents the position of the start
             * character of the IDENTIFIER token in the input stream.
             * The class Position wraps this to provide a level of abstraction
             * for positions in the input stream.
             */
            Position pos = new Position(idleft);
            /* addConstant returns null if id is already defined 
             * in the current scope */
            if( symtab.getCurrentScope().addConstant( id, pos, c ) == null ) {
                errors.error( id + " already defined", pos );
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDefSeq ::= ConstDefSeq ConstDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDefSeq ::= ConstDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= KW_VAR VarDeclSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= KW_TYPE TypeDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= KW_CONST ConstDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= 
            {
              DeclNode.DeclListNode RESULT =null;
		
            RESULT = new DeclNode.DeclListNode();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationList ::= DeclarationList Declaration 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= DeclarationList ProcedureDef SEMICOLON 
            {
              DeclNode.DeclListNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.ProcedureNode p = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            dl.addDeclaration(p);
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= DeclarationList CompoundStatement 
            {
              StatementNode.BlockNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode b = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.BlockNode( new Position( bright ), dl, b );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= error 
            {
              StatementNode.ProgramNode RESULT =null;
		
            /* A null result from Program will cause the compiler to
               avoid further processing. */
            RESULT = null;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		StatementNode.ProgramNode start_val = (StatementNode.ProgramNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 Block 
            {
              StatementNode.ProgramNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (StatementNode.ProgramNode) ((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		StatementNode.BlockNode block = (StatementNode.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            /* This action is executed after the whole program 
             * has been recognised */
            block.setBlockLocals( symtab.getCurrentScope() );
            symtab.leaveScope();
            /* Returned result of the whole parsing phase */
            RESULT = new StatementNode.ProgramNode( new Position( blockright), 
                        symtab, block );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              StatementNode.ProgramNode RESULT =null;

            /* This action occurs before the whole program is recognised.
             * Construct initial symbol table with current scope the 
             * predefined scope. */
            symtab = new SymbolTable(); 
            /* Set up a dummy symbol table entry for the main program */
            SymEntry.ProcedureEntry proc = 
                symtab.getCurrentScope().addProcedure( "<main>", 
                    Position.NO_POSITION );
            if( proc  == null ) {
                errors.fatal( "Could not add main program to symbol table",
                    Position.NO_POSITION );
            }
            /* Enter the scope for the main program and save the new local
             * scope in main's symbol table entry */
            Scope blockLocals = symtab.newScope( proc );
            proc.setLocalScope( blockLocals );
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

